var g=[],f=0,m=[],p=new Uint8ClampedArray(0);function I(r,t,h,o){const e=[],{width:a,height:i}=r;for(let s=0;s<i;s+=t)for(let c=0;c<a;c+=t){const n=Math.min(t,a-c),d=Math.min(t,i-s);e.push({started:!1,batch:{workerId:-1,task:r,xStart:c,yStart:s,width:n,height:d,supersamplingFactor:h,suppixelOffsets:o}})}return e}function b(r){const t=[],h=1/r;for(let o=0;o<r;o++)for(let e=0;e<r;e++)t.push({dx:(o+.5)*h-.5,dy:(e+.5)*h-.5});return t}function y(r,t,h,o,e,a,i,s){for(let n=0;n<a;n++)for(let d=0;d<e;d++){const k=(n*e+d)*4,u=h+d,w=o+n;if(u>=i||w>=s)continue;const E=(w*i+u)*4;for(let l=0;l<4;l++)r[E+l]=t[k+l]}}self.onmessage=async r=>{const t=r.data;p=new Uint8ClampedArray(t.width*t.height*4);const h=b(t.supersamplingFactor),o={type:"INFO",messages:["Dimensions: "+t.width+"x"+t.height,"Found "+t.objects.length+" objects","Bounces: "+t.bounces,"Supersampling: "+t.supersamplingFactor*t.supersamplingFactor+"x","Starting to raytrace..."],progress:0,data:p,width:t.width,height:t.height,startTime:t.startTime};self.postMessage(o);var e=[];g=I(t,128,t.supersamplingFactor,h),e.push("Created "+g.length+" batches with size 128x128!");const a=Math.min(Math.max(4,navigator.hardwareConcurrency-6),g.length);e.push("Using "+a+" workers!");try{for(let s=0;s<a;s++){e.push("Creating Worker-"+s+" ...");const c=new Worker(t.workerURL,{type:"module"});m.push(c),c.onmessage=M,e.push("Starting Worker-"+s+" ...");const n=g[s];n.started=!0,n.batch.workerId=s,c.postMessage(n.batch)}}catch(s){e.push("Error creating workers: "+s)}const i={type:"INFO",messages:e,progress:0,data:p,width:t.width,height:t.height,startTime:t.startTime};self.postMessage(i)};function M(r){const t=r.data;y(p,t.data,t.xStart,t.yStart,t.width,t.height,t.task.width,t.task.height),f++;const h=Math.round(f/g.length*100),o={type:"INFO",messages:["Batch "+f+" of "+g.length+" finished!"],progress:h,data:p,width:t.task.width,height:t.task.height,startTime:t.startTime};if(self.postMessage(o),f<g.length){const a=g.filter(s=>!s.started)[0],i=m[t.workerId];a&&(a.started=!0,a.batch.workerId=t.workerId,i.postMessage(a.batch));return}const e={type:"SUCCESS",messages:["All batches finished!","Raytracing finished!"],progress:100,data:p,width:t.task.width,height:t.task.height,startTime:t.startTime,objects:t.task.objects};self.postMessage(e)}
